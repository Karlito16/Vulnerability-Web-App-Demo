import express from 'express';
import { pool } from '../db/db';

export const router: express.Router = express.Router();

let username: string | undefined = "karlo";
let password: string | undefined = "dim123";
let enableSQLInjection: boolean = true;
let enableCSRF: boolean = true;
let messages: string[] = [];

router.get('/', async(req, res) => {
    res.render('home', {
        username: username,
        usernameTemp: undefined,
        password: password,
        loginMessage: undefined,
        messages: messages,
        enableSQLInjection: enableSQLInjection,
        enableCSRF: enableCSRF
    });
});


router.get('/search-messages', async(req, res) => {
    if (!username) {
        // login
        res.end();
    }
    enableSQLInjection = req.query["enable-sql-injection"] ? true : false;
    const searchValue = req.query["search-value"];

    let query: string;
    let queryArgs: any[] = [];
    if (enableSQLInjection) {
        query = `SELECT username, message FROM messages JOIN users ON messages.author_id = users.id WHERE username = '${username}' AND message LIKE '%${searchValue}%';`;
    } else {
        query = "SELECT username, message FROM messages JOIN users ON messages.author_id = users.id WHERE username = $1 AND message LIKE $2;";
        queryArgs = [username, '%' + searchValue + '%'];
    }
    pool.query(
        query,
        queryArgs,
        (error, results) => {
            messages = results.rows;
            res.render('home', {
                username: username,
                usernameTemp: undefined,
                password: password,
                loginMessage: undefined,
                messages: messages,
                enableSQLInjection: enableSQLInjection,
                enableCSRF: enableCSRF
            });
        }
    );
});


router.post('/login', async(req, res) => {
    const usernameBody: string = req.body.username;
    const passwordBody: string = req.body.password;
    let query: string = 'INSERT INTO users (username, password) VALUES ($1, $2);';
    let queryArgs: string[] = [usernameBody, passwordBody];
    pool.query(
        query, 
        queryArgs, 
        (error, results) => {
            let loginMessage: string | undefined = undefined;
            if (error) {
                query = 'SELECT COUNT(*) FROM users WHERE username = $1 AND password = $2;';
                queryArgs = [usernameBody, passwordBody];
                pool.query(
                    query,
                    queryArgs,
                    (error, results) => {
                        if (results.rows[0]["count"] == "0") {
                            loginMessage = 'Username or password incorrect.';
                        } else {
                            username = usernameBody;
                            password = passwordBody;
                        }
                        res.render('home', {
                            username: username,
                            usernameTemp: usernameBody,
                            password: password,
                            loginMessage: loginMessage,
                            messages: messages,
                            enableSQLInjection: enableSQLInjection,
                            enableCSRF: enableCSRF
                        });
                    }
                );
            } else {
                username = usernameBody;
                password = passwordBody;
                res.render('home', {
                    username: username,
                    usernameTemp: undefined,
                    password: password,
                    loginMessage: loginMessage,
                    messages: messages,
                    enableSQLInjection: enableSQLInjection,
                    enableCSRF: enableCSRF
                });
            }
        }
    );
});


router.post('/change-password', async(req, res) => {
    console.log(req);
    res.render('home', {
        username: username,
        usernameTemp: undefined,
        password: password,
        loginMessage: undefined,
        messages: messages,
        enableSQLInjection: enableSQLInjection,
        enableCSRF: enableCSRF
    });
});
